const MEM_SIZE: usize = 4096;

const FONTS: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

#[derive(Debug)]
pub struct Memory {
    memory: [u8; MEM_SIZE],
}

impl Default for Memory {
    fn default() -> Self {
        let mut memory = [0; MEM_SIZE];
        memory[..FONTS.len()].copy_from_slice(&FONTS);

        Self { memory }
    }
}

impl Memory {
    pub fn clear(&mut self) {
        self.memory = [0; MEM_SIZE];
    }

    pub fn read(&self, addr: u16) -> u8 {
        self.memory[addr as usize]
    }

    pub fn read_slice(&self, start: usize, end: usize) -> &[u8] {
        &self.memory[start..end]
    }

    pub fn write(&mut self, addr: u16, byte: u8) {
        self.memory[addr as usize] = byte;
    }

    pub fn write_slice(&mut self, start: usize, end: usize, slice: &[u8]) {
        self.memory[start..end].copy_from_slice(slice);
    }
}
